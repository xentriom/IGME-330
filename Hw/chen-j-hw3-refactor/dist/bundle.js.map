{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://chen-j-hw3-refactor/./src/utils.ts","webpack://chen-j-hw3-refactor/./src/enums/audio-defaults.enum.ts","webpack://chen-j-hw3-refactor/./src/audio.ts","webpack://chen-j-hw3-refactor/./src/canvas.ts","webpack://chen-j-hw3-refactor/./src/enums/main-defaults.enum.ts","webpack://chen-j-hw3-refactor/./src/enums/toggle-buttons.enum.ts","webpack://chen-j-hw3-refactor/./src/classes/CanvasSprite.ts","webpack://chen-j-hw3-refactor/./src/classes/Sprite.ts","webpack://chen-j-hw3-refactor/./src/main.ts","webpack://chen-j-hw3-refactor/./src/loader.ts"],"sourcesContent":["import { ColorStop } from \"./interfaces/colorStop.interface\";\nimport { SliderConfig } from \"./interfaces/sliderConfig.interface\";\n\nconst makeColor = (red: number, green: number, blue: number, alpha: number = 1): string => {\n    return `rgba(${red},${green},${blue},${alpha})`;\n};\n\nconst getRandom = (min: number, max: number): number => {\n    return Math.random() * (max - min) + min;\n};\n\nconst getRandomColor = (): string => {\n    const floor = 35;\n    const getByte = () => getRandom(floor, 255 - floor);\n    return `rgba(${getByte()},${getByte()},${getByte()},1)`;\n};\n\nconst getLinearGradient = (ctx: CanvasRenderingContext2D, startX: number, startY: number, endX: number, endY: number, colorStops: ColorStop[]): CanvasGradient => {\n    let lg = ctx.createLinearGradient(startX, startY, endX, endY);\n    for (let stop of colorStops) {\n        lg.addColorStop(stop.percent, stop.color);\n    }\n    return lg;\n};\n\nconst goFullscreen = (element: HTMLElement): void => {\n    // fun fact: lint standards require else if to be in new line\n    if (element.requestFullscreen) {\n        element.requestFullscreen();\n    }\n};\n\nconst setupSlider = ({ sliderId, labelId, unit, setValueCallback }: SliderConfig): void => {\n    let slider = document.querySelector(sliderId) as HTMLInputElement;\n    let label = document.querySelector(labelId) as HTMLLabelElement;\n\n    slider.oninput = e => {\n        if (e.target) {\n            setValueCallback(Number((e.target as HTMLInputElement).value));\n            label.innerHTML = `${(e.target as HTMLInputElement).value} ${unit}`;\n        }\n    };\n\n    slider.dispatchEvent(new Event(\"input\"));\n};\n\nconst formatTime = (seconds: number): string => {\n    const minutes = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n\n    // format time as mm:ss\n    return `${String(minutes).padStart(1, '0')}:${String(secs).padStart(2, '0')}`;\n};\n\n\nexport { makeColor, getRandomColor, getLinearGradient, goFullscreen, setupSlider, formatTime };","export enum Defaults {\n    GAIN = .5,\n    NUM_SAMPLE = 256\n}\n\nexport enum BiquadDefaults {\n    BASS_FREQ = 200,\n    BASS_GAIN = 6,\n    TREBLE_FREQ = 4000,\n    TREBLE_GAIN = 4\n}","import { Defaults, BiquadDefaults } from \"./enums/audio-defaults.enum\";\n\nlet audioCtx: AudioContext;\nlet element: HTMLAudioElement;\nlet sourceNode: MediaElementAudioSourceNode;\nlet analyserNode: AnalyserNode;\nlet gainNode: GainNode;\nlet bassFilter: BiquadFilterNode;\nlet trebleFilter: BiquadFilterNode;\n\nconst setupWebaudio = (filePath: string): void => {\n    const AudioContext = window.AudioContext;\n\n    audioCtx = new AudioContext();\n    element = new Audio();\n\n    loadSoundFile(filePath);\n\n    // create nodes\n    sourceNode = audioCtx.createMediaElementSource(element);\n    analyserNode = audioCtx.createAnalyser();\n    analyserNode.fftSize = Defaults.NUM_SAMPLE;\n\n    // create gain node\n    gainNode = audioCtx.createGain();\n    gainNode.gain.value = Defaults.GAIN;\n\n    // create bass filter\n    bassFilter = audioCtx.createBiquadFilter();\n    bassFilter.type = \"lowshelf\";\n    bassFilter.frequency.setValueAtTime(BiquadDefaults.BASS_FREQ, audioCtx.currentTime);\n    bassFilter.gain.setValueAtTime(BiquadDefaults.BASS_GAIN, audioCtx.currentTime);\n\n    // create treble filter\n    trebleFilter = audioCtx.createBiquadFilter();\n    trebleFilter.type = \"highshelf\";\n    trebleFilter.frequency.setValueAtTime(BiquadDefaults.TREBLE_FREQ, audioCtx.currentTime);\n    trebleFilter.gain.setValueAtTime(BiquadDefaults.TREBLE_GAIN, audioCtx.currentTime);\n\n    // connect nodes\n    sourceNode.connect(analyserNode);\n    analyserNode.connect(bassFilter);\n    bassFilter.connect(trebleFilter);\n    trebleFilter.connect(gainNode);\n    gainNode.connect(audioCtx.destination);\n}\n\nconst loadSoundFile = (filePath: string): void => {\n    element.src = filePath\n};\n\nconst playCurrentSound = (): void => {\n    element.play()\n};\n\nconst pauseCurrentSound = (): void => {\n    element.pause()\n};\n\nconst setVolume = (value: number): void => {\n    gainNode.gain.value = value;\n}\n\nconst setBassFrequency = (value: number): void => {\n    bassFilter.frequency.setValueAtTime(value, audioCtx.currentTime);\n}\n\nconst setBassGain = (value: number): void => {\n    bassFilter.gain.setValueAtTime(value, audioCtx.currentTime);\n}\n\nconst setTrebleFrequency = (value: number): void => {\n    trebleFilter.frequency.setValueAtTime(value, audioCtx.currentTime);\n}\n\nconst setTrebleGain = (value: number): void => {\n    trebleFilter.gain.setValueAtTime(value, audioCtx.currentTime);\n}\n\nconst getCurrentTime = (): number => {\n    return element.currentTime;\n};\n\nconst getDuration = (): number => {\n    return element.duration;\n};\n\nconst seekTo = (time: number): void => {\n    element.currentTime = time;\n};\n\nexport {\n    audioCtx,\n    setupWebaudio,\n    playCurrentSound,\n    pauseCurrentSound,\n    loadSoundFile,\n    setVolume,\n    setBassFrequency,\n    setBassGain,\n    setTrebleFrequency,\n    setTrebleGain,\n    getCurrentTime,\n    getDuration,\n    seekTo,\n    analyserNode\n};","import * as utils from './utils';\r\nimport { CanvasSprite } from './classes/CanvasSprite';\r\nimport { DrawParams } from './interfaces/drawParams.interface';\r\n\r\nlet ctx: CanvasRenderingContext2D;\r\nlet canvasWidth: number;\r\nlet canvasHeight: number;\r\nlet gradient: CanvasGradient;\r\nlet analyserNode: AnalyserNode;\r\nlet audioData: Uint8Array;\r\n\r\nlet sprite1: CanvasSprite;\r\nlet sprite2: CanvasSprite;\r\nlet sprite3: CanvasSprite;\r\n\r\nconst setupCanvas = (canvasElement: HTMLCanvasElement, analyserNodeRef: AnalyserNode): void => {\r\n    ctx = canvasElement.getContext(\"2d\")!;\r\n    canvasWidth = canvasElement.width;\r\n    canvasHeight = canvasElement.height;\r\n\r\n    gradient = utils.getLinearGradient(ctx, 0, 0, 0, canvasHeight, [\r\n        { percent: 0, color: \"#b3e5fc\" },\r\n        { percent: 0.5, color: \"#ce93d8\" },\r\n        { percent: 1, color: \"#fff59d\" }\r\n    ]);\r\n\r\n    analyserNode = analyserNodeRef;\r\n    audioData = new Uint8Array(analyserNode.fftSize / 2);\r\n\r\n    // create sprites\r\n    sprite1 = new CanvasSprite(100, 100, 10, 'rgba(255, 0, 0, 0.2)', 1);\r\n    sprite2 = new CanvasSprite(100, 100, 10, 'rgba(0, 0, 255, 0.2)', 0.5);\r\n    sprite3 = new CanvasSprite(100, 100, 10, 'rgba(0, 255, 0, 0.2)', 0.25);\r\n}\r\n\r\nconst draw = (params: DrawParams = {\r\n    visualizerType: false,\r\n    showSprites: false,\r\n    showGradient: false,\r\n    showBars: false,\r\n    showCircles: false, \r\n    showNoise: false,\r\n    showInvert: false,\r\n    showEmboss: false\r\n}) => {\r\n    // draw visualizer depending on the type\r\n    if (params.visualizerType) {\r\n        analyserNode.getByteFrequencyData(audioData);\r\n    } else {\r\n        analyserNode.getByteTimeDomainData(audioData);\r\n    }\r\n\r\n    ctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.globalAlpha = .1;\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n    ctx.restore();\r\n\r\n    // show gradient\r\n    if (params.showGradient) {\r\n        ctx.save();\r\n        ctx.fillStyle = gradient;\r\n        ctx.globalAlpha = .8;\r\n        ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n        ctx.restore();\r\n    }\r\n\r\n    // show bars\r\n    if (params.showBars) {\r\n        let barSpacing = 2;\r\n        let margin = 0;\r\n        let screenWidthForBars = canvasWidth - (audioData.length * barSpacing) - margin;\r\n        let barWidth = screenWidthForBars / audioData.length;\r\n\r\n        ctx.save();\r\n\r\n        let gradient = ctx.createLinearGradient(0, canvasHeight, 0, 0);\r\n        gradient.addColorStop(0, 'rgba(255,255,255,0.85)');\r\n        gradient.addColorStop(1, 'rgba(255,105,180,0.85)');\r\n\r\n        ctx.fillStyle = gradient;\r\n        ctx.strokeStyle = 'rgba(0,0,0,0.15)';\r\n        ctx.lineWidth = 1.5;\r\n        ctx.lineJoin = 'round';\r\n\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            let barHeight = Math.max((audioData[i] / 255) * canvasHeight * 0.8, 1);\r\n            let x = margin + i * (barWidth + barSpacing);\r\n            let y = canvasHeight - barHeight;\r\n\r\n            ctx.fillRect(Math.floor(x), Math.floor(y), Math.ceil(barWidth), Math.ceil(barHeight));\r\n            ctx.strokeRect(Math.floor(x), Math.floor(y), Math.ceil(barWidth), Math.ceil(barHeight));\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    // show circles\r\n    if (params.showCircles) {\r\n        let maxRadius = canvasHeight / 4;\r\n        let centerX = canvasWidth / 2;\r\n        let centerY = canvasHeight / 2;\r\n\r\n        ctx.save();\r\n        ctx.globalAlpha = 0.5;\r\n\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            const percent = audioData[i] !== undefined ? audioData[i] / 255 : 0;\r\n            const pulse = Math.sin(Date.now() / 300 + i) * 0.05;\r\n            let circleRadius = Math.max((percent + pulse) * maxRadius, 0);\r\n\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(255, 150, 150, 0.4 - percent / 3.0);\r\n            ctx.arc(centerX, centerY, circleRadius, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(135, 206, 250, 0.15 - percent / 10.0);\r\n            ctx.arc(centerX, centerY, Math.max(circleRadius * 1.6 + pulse * 20, 0), 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n\r\n            ctx.save();\r\n\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(255, 255, 100, 0.6 - percent / 5.0);\r\n            ctx.arc(centerX, centerY, Math.max(circleRadius * 0.5 - pulse * 10, 0), 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n\r\n            ctx.restore();\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    // show sprites\r\n    if (params.showSprites) {\r\n        sprite1.update(audioData, canvasWidth, canvasHeight);\r\n        sprite2.update(audioData, canvasWidth, canvasHeight);\r\n        sprite3.update(audioData, canvasWidth, canvasHeight);\r\n\r\n        sprite1.draw(ctx);\r\n        sprite2.draw(ctx);\r\n        sprite3.draw(ctx);\r\n    }\r\n\r\n    let imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\r\n    let data = imageData.data;\r\n    let length = data.length;\r\n    let width = imageData.width;\r\n\r\n    for (let i = 0; i < length; i += 4) {\r\n        // show noise\r\n        if (params.showNoise && Math.random() < .05) {\r\n            data[i] = data[i + 1] = data[i + 2] = 255;\r\n        }\r\n\r\n        // show invert\r\n        if (params.showInvert) {\r\n            let red = data[i], green = data[i + 1], blue = data[i + 2];\r\n            data[i] = 255 - red;\r\n            data[i + 1] = 255 - green;\r\n            data[i + 2] = 255 - blue;\r\n        }\r\n    }\r\n\r\n    // show emboss\r\n    if (params.showEmboss) {\r\n        for (let i = 0; i < length; i++) {\r\n            if (i % 4 == 3) continue;\r\n            data[i] = 127 + 2 * data[i] - data[i + 4] - data[i + width * 4];\r\n        }\r\n    }\r\n\r\n    ctx.putImageData(imageData, 0, 0);\r\n}\r\n\r\nexport { setupCanvas, draw, ctx };","export enum DEFAULTS {\n    sound1 = \"./assets/audio/Passing Memories.mp3\"\n}","export enum ToggleButtons {\n    PLAY = \"https://c.animaapp.com/fgpR59jS/img/svgexport-35--1--1@2x.png\",\n    PAUSE = \"https://c.animaapp.com/yPlj5CdF/img/svgexport-83-1.svg\"\n}","export class CanvasSprite {\n    x: number;\n    y: number;\n    size: number;\n    color: string;\n    scale: number;\n    velocity: { x: number, y: number };\n\n    constructor(x: number, y: number, size: number, color: string, scale: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.size = size;\n        this.color = color;\n        this.scale = scale;\n        this.velocity = { x: Math.random() * 2 - 1, y: Math.random() * 2 - 1 };\n    }\n\n    update(audioData: Uint8Array, canvasWidth: number, canvasHeight: number): void {\n        const percent = audioData.reduce((a, b) => a + b, 0) / (audioData.length * 255);\n\n        // update size and position\n        this.size = Math.max(percent * 100 * this.scale, 20);\n        this.x += this.velocity.x;\n        this.y += this.velocity.y;\n\n        // bounce off the x edges\n        if (this.x < 0 || this.x > canvasWidth) {\n            this.velocity.x *= -1;\n        }\n\n        // bounce off the y edges\n        if (this.y < 0 || this.y > canvasHeight) {\n            this.velocity.y *= -1;\n        }\n    }\n\n    draw(ctx: CanvasRenderingContext2D): void {\n        ctx.save();\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.size * this.scale, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.restore();\n    }\n}","export class Sprite {\n    image: HTMLImageElement;\n    rotationAngle: number;\n    rotationInterval: NodeJS.Timeout | null;\n\n    constructor(image: HTMLImageElement) {\n        this.image = image;\n        this.rotationAngle = 0;\n        this.rotationInterval = null;\n    }\n\n    startRotation(): void {\n        if (this.rotationInterval) return;\n\n        const rotate = () => {\n            this.rotationAngle -= 1;\n            this.image.style.transform = `rotate(${this.rotationAngle}deg)`;\n            this.rotationInterval = setTimeout(rotate, 1000 / 60) as unknown as NodeJS.Timeout;\n        };\n\n        rotate();\n    }\n\n    stopRotation(): void {\n        if (this.rotationInterval) {\n            clearTimeout(this.rotationInterval);\n            this.rotationInterval = null;\n        }\n        this.image.style.transform = '';\n    }\n}","import * as utils from './utils';\nimport * as audio from './audio';\nimport * as canvas from './canvas';\nimport { Sprite } from './classes/Sprite';\nimport { DEFAULTS } from './enums/main-defaults.enum';\nimport { DrawParams } from './interfaces/drawParams.interface';\nimport { AVData } from './interfaces/avData.interface';\nimport { ToggleButtons } from './enums/toggle-buttons.enum';\n\nlet avData: AVData;\n\nconst preload = async (): Promise<AVData> => {\n    // fetch and store the data\n    const response = await fetch(\"data/av-data.json\");\n    avData = await response.json() as AVData;\n\n    return avData;\n}\n\nconst init = (): void => {\n    audio.setupWebaudio(DEFAULTS.sound1);\n\n    // set up canvas ui\n    let canvasElement = document.querySelector(\"canvas\") as HTMLCanvasElement;\n    setupUI(canvasElement);\n    canvas.setupCanvas(canvasElement, audio.analyserNode);\n\n    // set up track selection\n    let trackElement = document.querySelector(\"#track-selection\") as HTMLElement;\n    setupTracks(trackElement);\n\n    loop();\n}\n\nconst setupTracks = (trackElement: HTMLElement): void => {\n    const sprites = new Map<HTMLElement, Sprite>();\n\n    // create a div for each track\n    for (let track of avData.data) {\n        let div = document.createElement(\"div\");\n        div.classList.add(\"box\", \"tracks\", \"track-info\", \"mb-5\");\n        div.dataset.name = track.name;\n        div.dataset.path = track.path;\n\n        let mediaDiv = document.createElement(\"div\");\n        mediaDiv.classList.add(\"media\");\n\n        let mediaLeft = document.createElement(\"div\");\n        mediaLeft.classList.add(\"media-left\");\n\n        let figure = document.createElement(\"figure\");\n        figure.classList.add(\"image\", \"is-48x48\");\n\n        let img = document.createElement(\"img\");\n        img.classList.add(\"is-rounded\");\n        img.src = track.image;\n        figure.appendChild(img);\n        mediaLeft.appendChild(figure);\n        mediaDiv.appendChild(mediaLeft);\n\n        const sprite = new Sprite(img);\n        sprites.set(div, sprite);\n\n        let mediaContent = document.createElement(\"div\");\n        mediaContent.classList.add(\"media-content\");\n\n        let h3 = document.createElement(\"h3\");\n        h3.classList.add(\"title\", \"is-size-6\");\n        h3.innerHTML = track.name;\n        mediaContent.appendChild(h3);\n\n        let p = document.createElement(\"p\");\n        p.classList.add(\"subtitle\", \"is-size-7\");\n        p.innerHTML = track.author;\n        mediaContent.appendChild(p);\n\n        mediaDiv.appendChild(mediaContent);\n        div.appendChild(mediaDiv);\n        trackElement.appendChild(div);\n    }\n\n    // start the first sprite rotation\n    const initSpirte = sprites.values().next().value;\n    initSpirte?.startRotation();\n\n    // set up click event\n    const playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement;\n    const playButtonImage = playButton.querySelector(\"img\") as HTMLImageElement;\n\n    trackElement.onclick = (e: Event) => {\n        const trackDiv = (e.target as HTMLElement).closest(\".box\") as HTMLElement;\n\n        if (trackDiv) {\n            const trackPath = trackDiv.dataset.path;\n            if (trackPath) {\n                audio.loadSoundFile(trackPath);\n\n                sprites.forEach((sprite, div) => {\n                    div === trackDiv ? sprite.startRotation() : sprite.stopRotation();\n                });\n\n                playButtonImage.src = ToggleButtons.PAUSE;\n            }\n        }\n    }\n}\n\nconst setupUI = (canvasElement: HTMLCanvasElement): void => {\n    // burger menu\n    const burgerIcon = document.querySelector('#burger') as HTMLElement;\n    const navbarMenu = document.querySelector('#nav-links') as HTMLElement;\n\n    burgerIcon.addEventListener('click', () => {\n        navbarMenu.classList.toggle('is-active');\n    });\n\n    // full screen button\n    const fsButton = document.querySelector(\"#btn-fs\") as HTMLButtonElement;\n    fsButton.onclick = () => utils.goFullscreen(canvasElement);\n\n    // play/pause button\n    const playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement;\n    const playButtonImage = playButton.querySelector(\"img\") as HTMLImageElement;\n    playButton.onclick = (e: MouseEvent) => {\n        const target = e.currentTarget as HTMLButtonElement;\n\n        if (audio.audioCtx.state === \"suspended\") {\n            audio.audioCtx.resume();\n        }\n\n        if (target.dataset.playing === \"no\") {\n            audio.playCurrentSound();\n            target.dataset.playing = \"yes\";\n            playButtonImage.src = ToggleButtons.PLAY;\n        } else {\n            audio.pauseCurrentSound();\n            target.dataset.playing = \"no\";\n            playButtonImage.src = ToggleButtons.PAUSE;\n        }\n    };\n\n    // volume slider\n    let volumeSlider = document.querySelector(\"#slider-volume\") as HTMLInputElement;\n    volumeSlider.oninput = (e: Event) => {\n        const target = e.target as HTMLInputElement;\n        audio.setVolume(Number(target.value));\n    };\n    volumeSlider.dispatchEvent(new Event(\"input\"));\n\n    // Set up bass sliders\n    utils.setupSlider({\n        sliderId: \"#slider-bass-frequency\",\n        labelId: \"#label-bass-frequency\",\n        unit: \"Hz\",\n        setValueCallback: audio.setBassFrequency\n    });\n    utils.setupSlider({\n        sliderId: \"#slider-bass-gain\",\n        labelId: \"#label-bass-gain\",\n        unit: \"dB\",\n        setValueCallback: audio.setBassGain\n    });\n\n    // Set up treble sliders\n    utils.setupSlider({\n        sliderId: \"#slider-treble-frequency\",\n        labelId: \"#label-treble-frequency\",\n        unit: \"Hz\",\n        setValueCallback: audio.setTrebleFrequency\n    });\n    utils.setupSlider({\n        sliderId: \"#slider-treble-gain\",\n        labelId: \"#label-treble-gain\",\n        unit: \"dB\",\n        setValueCallback: audio.setTrebleGain\n    });\n\n    // instand of previous verisons, i went with a more compact way\n    const checkboxes = [\n        { id: \"cb-visualizer\", param: \"visualizerType\" },\n        { id: \"cb-sprites\", param: \"showSprites\" },\n        { id: \"cb-gradient\", param: \"showGradient\" },\n        { id: \"cb-bars\", param: \"showBars\" },\n        { id: \"cb-circles\", param: \"showCircles\" },\n        { id: \"cb-noise\", param: \"showNoise\" },\n        { id: \"cb-invert\", param: \"showInvert\" },\n        { id: \"cb-emboss\", param: \"showEmboss\" }\n    ];\n\n    checkboxes.forEach(({ id, param }) => {\n        const checkbox = document.querySelector(`#${id}`) as HTMLInputElement;\n        checkbox.checked = avData.drawParams[param as keyof DrawParams];\n        checkbox.onchange = () => {\n            avData.drawParams[param as keyof DrawParams] = checkbox.checked;\n        };\n    });\n\n    const progressBar = document.querySelector(\"#progress-bar\") as HTMLInputElement;\n    progressBar.oninput = (e: Event) => {\n        const target = e.target as HTMLInputElement;\n        const newTime = audio.getDuration() * (Number(target.value) / 100);\n        audio.seekTo(newTime);\n    };\n}\n\nconst loop = (): void => {\n    setTimeout(loop, 1000 / 60);\n    canvas.draw(avData.drawParams);\n    updateProgress();\n}\n\n/**\n * update the progress bar and label\n */\nconst updateProgress = (): void => {\n    const progressBar = document.querySelector(\"#progress-bar\") as HTMLInputElement;\n    const progressLabel = document.querySelector(\"#progress-label\") as HTMLElement;\n\n    const currentTime = audio.getCurrentTime();\n    const duration = audio.getDuration();\n\n    if (duration > 0) {\n        progressBar.value = ((currentTime / duration) * 100).toString();\n        progressLabel.innerHTML = `${utils.formatTime(currentTime)} / ${utils.formatTime(duration)}`;\n    }\n}\n\nexport { preload, init };","import * as main from \"./main\";\n\nconst load = async (): Promise<void> => {\n\tconst data = await main.preload();\n\tdocument.title = data.title;\n\n\ttry {\n\t\tmain.init();\n\t}\n\tcatch {\n\t\t// ignore\n\t}\n}\n\nload();"],"names":["Defaults","BiquadDefaults","audioCtx","sourceNode","analyserNode","gainNode","bassFilter","trebleFilter","makeColor","red","green","blue","alpha","setupSlider","sliderId","labelId","unit","setValueCallback","slider","document","querySelector","label","oninput","e","target","Number","value","innerHTML","dispatchEvent","Event","formatTime","seconds","minutes","Math","floor","secs","String","padStart","ctx","canvasWidth","canvasHeight","gradient","audioData","sprite1","sprite2","sprite3","DEFAULTS","ToggleButtons","loadSoundFile","filePath","src","setBassFrequency","frequency","setValueAtTime","currentTime","setBassGain","gain","setTrebleFrequency","setTrebleGain","getDuration","duration","x","y","size","color","scale","this","velocity","random","update","percent","reduce","a","b","length","max","draw","save","fillStyle","beginPath","arc","PI","fill","restore","image","rotationAngle","rotationInterval","startRotation","rotate","style","transform","setTimeout","stopRotation","clearTimeout","avData","setupTracks","trackElement","sprites","Map","data","track","div","createElement","classList","add","dataset","name","path","mediaDiv","mediaLeft","figure","img","appendChild","sprite","Sprite","set","mediaContent","h3","p","author","initSpirte","values","next","playButtonImage","onclick","trackDiv","closest","trackPath","forEach","PAUSE","setupUI","canvasElement","burgerIcon","navbarMenu","addEventListener","toggle","element","requestFullscreen","playButton","currentTarget","state","resume","playing","play","PLAY","pause","volumeSlider","id","param","checkbox","checked","drawParams","onchange","time","loop","params","visualizerType","showSprites","showGradient","showBars","showCircles","showNoise","showInvert","showEmboss","getByteFrequencyData","getByteTimeDomainData","globalAlpha","fillRect","barWidth","createLinearGradient","addColorStop","strokeStyle","lineWidth","lineJoin","i","barHeight","ceil","strokeRect","maxRadius","centerX","centerY","undefined","pulse","sin","Date","now","circleRadius","closePath","imageData","getImageData","width","putImageData","updateProgress","progressBar","progressLabel","toString","fetch","json","title","AudioContext","sound1","window","Audio","createMediaElementSource","createAnalyser","fftSize","NUM_SAMPLE","createGain","GAIN","createBiquadFilter","type","BASS_FREQ","BASS_GAIN","TREBLE_FREQ","TREBLE_GAIN","connect","destination","analyserNodeRef","getContext","height","startX","startY","endX","endY","lg","Uint8Array","CanvasSprite"],"sourceRoot":""}